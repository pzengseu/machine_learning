# -*- coding: utf-8 -*-
'''
最大熵模型,GIS算法
参考文献:
http://www.fuqingchuan.com/2015/03/714.html
http://www.fuqingchuan.com/2015/03/776.html
'''
import sys
import math
import collections


class MaxEnt:
    def __init__(self):
        self._samples = []  # 样本集,元素是[y1, x1, x2, ..., xn]的元祖
        self._Y = set([])  # 便签集合
        self._numXY = collections.defaultdict(int)
        self._N = 0  # 样本数量
        self._n = 0  # 特征对(xi, yi)
        self._xyID = {}  # 对(x, y)对做的顺序编号(ID),Key是(xi, yi)对, Value是ID
        self._C = 0  # 样本最大的特征数量,用于求参时的迭代
        self._ep_ = []  # 样本分布的特征期望
        self._ep = []  # 模型分布的特征期望值
        self._w = []  # 对应n个特征的权值
        self._lastw = []  # 上一轮迭代的权值
        self._EPS = 0.01  # 判断是否收敛的阈值

    def load_data(self, filename):
        for line in open(filename):
            sample = line.strip().split('\t')
            if len(sample) < 2:
                continue
            y = sample[0]
            X = sample[1:]
            self._samples.append(sample)
            self._Y.add(y)
            for x in set(X):
                self._numXY[(x, y)] += 1

    def _initparms(self):
        self._N = len(self._samples)
        self._n = len(self._numXY)
        self._C = max([len(sample) - 1 for sample in self._samples])
        self._w = [0.0] * self._n
        self._lastw = self._w[:]
        self._sample_ep()

    def _sample_ep(self):
        self._ep_ = [0.0] * self._n
        for i, xy in enumerate(self._numXY):
            self._ep_[i] = self._numXY[xy] * 1.0 / self._N
            self._xyID[xy] = i

    def _zx(self, X):
        ZX = 0.0
        for y in self._Y:
            sum = 0.0
            for x in X:
                if (x, y) in self._numXY:
                    sum += self._w[self._xyID[(x, y)]]
            ZX += math.exp(sum)
        return ZX

    def _pyx(self, X):
        ZX = self._zx(X)
        results = []
        for y in self._Y:
            sum = 0.0
            for x in X:
                if (x, y) in self._numXY:
                    sum += self._w[self._xyID[(x, y)]]
            pyx = 1.0 / ZX * math.exp(sum)
            results.append((y, pyx))
        return results

    def _model_ep(self):
        self._ep = [0.0] * self._n
        for sample in self._samples:
            X = sample[1:]
            pyx = self._pyx(X)
            for y, p in pyx:
                for x in X:
                    if (x, y) in self._numXY:
                        self._ep[self._xyID[(x, y)]] += p * 1.0 / self._N

    def _convergence(self):
        for w, lw in zip(self._w, self._lastw):
            if math.fabs((w - lw)) >= self._EPS:
                return False
        return True

    def train(self, maxiter=1000):
        self._initparms()
        for i in xrange(maxiter):
            print "Iter: %d..." % i
            self._lastw = self._w[:]
            self._model_ep()
            for i, w in enumerate(self._w):
                self._w[i] += 1.0 / self._C * math.log(self._ep_[i] / self._ep[i])
            print self._w
            if self._convergence():
                break

    def predict(self, input):
        X = input.strip().split('\t')
        prob = self._pyx(X)
        return prob


if __name__ == '__main__':
    maxent = MaxEnt()
    maxent.load_data('data/gis.txt')
    maxent.train()
    print maxent.predict("sunny\thot\thigh\tFALSE")
    print maxent.predict("overcast\thot\thigh\tFALSE")
    print maxent.predict("sunny\tcool\thigh\tTRUE")
    sys.exit(0)
